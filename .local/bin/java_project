#!/bin/bash

# This script is used turn a folder into a java project
# It will create a src folder and a bin folder

# Check if the user has provided a folder name
if [ $# -eq 0 ]; then
    echo "Please provide a folder name"
    # take the user input
    read folder_name
    # Check if the folder name is empty
    if [ -z $folder_name ]; then
        echo "Folder name cannot be empty"
        exit 1
    fi
    # Check if the folder already exists
    if [ -d $folder_name ]; then
        echo "Folder already exists"
        exit 1
    fi 
    # Create the folder
    mkdir $folder_name
fi

# Check if the user has provided a folder name
if [ $# -eq 1 ]; then
    folder_name=$1
fi

# Check if the folder already exists
if [ -d folder_name ]; then
    echo "Folder already exists"
    exit 1
fi

# Ask for the package name
echo "Enter the package name"
read package_name

# If the package name contains dots, replace them with slashes
package_name=$(echo $package_name | sed 's/\./\//g')

# Ask for the main class name
echo "Enter the main class name"
read main_class_name

# Create the folder
mkdir $folder_name

# Create the src, bin and commands folder
mkdir $folder_name/src
mkdir $folder_name/bin
mkdir $folder_name/commands
mkdir $folder_name/commands/scripts

# Write the build.c file content
echo "#include <stdio.h>" > $folder_name/commands/scripts/build.c
echo "#include <stdlib.h>" >> $folder_name/commands/scripts/build.c 
echo "int main() {" >> $folder_name/commands/scripts/build.c 
echo "system(\"cd .. && javac -d bin src/$package_name/*.java\");" >> $folder_name/commands/scripts/build.c
echo "return 0;" >> $folder_name/commands/scripts/build.c 
echo "}" >> $folder_name/commands/scripts/build.c 

# Write the run.c file content
echo "#include <stdio.h>" > $folder_name/commands/scripts/run.c 
echo "#include <stdlib.h>" >> $folder_name/commands/scripts/run.c 
echo "int main() {" >> $folder_name/commands/scripts/run.c 
echo "system(\"cd .. && java -cp bin $package_name.$main_class_name\");" >> $folder_name/commands/scripts/run.c 
echo "return 0;" >> $folder_name/commands/scripts/run.c 
echo "}" >> $folder_name/commands/scripts/run.c 

# Compile the build.c and run.c files and move the executables to the commands folder
gcc $folder_name/commands/scripts/build.c -o $folder_name/commands/build
gcc $folder_name/commands/scripts/run.c -o $folder_name/commands/run

# Create the package folder
mkdir $folder_name/src/$package_name

# Create the main class file
touch $folder_name/src/$package_name/$main_class_name.java

# If the package name contains slashes, replace them with dots
package_name=$(echo $package_name | sed 's/\//\./g')

# Write the main class file content
echo "package $package_name;" > $folder_name/src/$package_name/$main_class_name.java
echo "" >> $folder_name/src/$package_name/$main_class_name.java
echo "public class $main_class_name {" >> $folder_name/src/$package_name/$main_class_name.java
echo "    public static void main(String[] args) {" >> $folder_name/src/$package_name/$main_class_name.java
echo "        System.out.println(\"Hello World\");" >> $folder_name/src/$package_name/$main_class_name.java
echo "    }" >> $folder_name/src/$package_name/$main_class_name.java
echo "}" >> $folder_name/src/$package_name/$main_class_name.java
